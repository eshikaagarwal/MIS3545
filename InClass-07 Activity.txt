USE AdventureWorks2012; /*Set current database*/


/*1, Display the total amount collected from the orders for each order date. */
SELECT SUM(TotalDue) as daily_amount, OrderDate
COUNT(SalesOrderID) as Number_of_orders
FROM Sales.SalesOrderHeader
GROUP BY OrderDate
ORDER BY SUM(TotalDue) DESC;

/*2, Display the total amount collected from selling the products, 774 and 777. */
SELECT ProductID, SUM(LineTotal) as Total_Amount, 
AVG(UnitPrice) as Avg_Unit_Price, 
MAX(UnitPrice) as Max_Unit_Price, 
MIN(UnitPrice) as Min_Unit_Price, 
SUM(OrderQty) as Total_number_of_units_sold
FROM Sales.SalesOrderDetail
WHERE ProductID Between 700 and 800 /*total amount collected from products with product ID's in between 700 and 800*/
WHERE ProductID = 774 OR ProductID = 777; /*total amount from products with product ID's 774 and 777*/
GROUP BY ProductID
HAVING SUM(OrderQty)>3000
ORDER BY SUM(OrderQty) DESC;

/*3, Write a query to display the sales person BusinessEntityID, last name and first name of all the sales persons and the name of the territory to which they belong.*/
select sp.BusinessEntityID, st.TerritoryID, pp.FirstName, pp.LastName
FROM Sales.SalesPerson as sp
full outer join Person.Person as pp
on sp.BusinessEntityID = pp.BusinessEntityID
join Sales.SalesTerritory as st
on st.TerritoryID = sp.TerritoryID;



/*4,  Write a query to display the Business Entities of the customers that have the 'Vista' credit card.*/
/* Tables: Sales.CreditCard, Sales.PersonCreditCard, Person.Person*/
SELECT pp.BusinessEntityID
FROM Sales.CreditCard AS cc
JOIN Sales.PersonCreditCard AS pc
ON cc.CreditCardID = pc.CreditCardID
JOIN Person.Person AS pp
ON pp.BusinessEntityID = pc.CreditCardID
WHERE cc.CardType = 'Vista';


/*Show the number of customers for each type of credit cards*/
SELECT count(pp.BusinessEntityID), cc.CardType
FROM Sales.CreditCard AS cc
JOIN Sales.PersonCreditCard AS pc
ON cc.CreditCardID = pc.CreditCardID
JOIN Person.Person AS pp
ON pp.BusinessEntityID = pc.CreditCardID
GROUP BY cc.CardType;

/*5, Write a query to display ALL the country region codes along with their corresponding territory IDs*/
/* tables: Sales.SalesTerritory*/
SELECT st.TerritoryID, cr.CountryRegionCode, cr.Name as Country_Region_Name
FROM Sales.SalesTerritory as st
full outer JOIN Person.CountryRegion as cr
on st.CountryRegionCode = cr.CountryRegionCode
where st.TerritoryID is null; /*list all the country regions that don't belong to any territory*/

/*6, Find out the average of the total dues of all the orders.*/
SELECT AVG(TotalDue)
FROM Sales.SalesOrderHeader;

/*7, Write a query to report the sales order ID of those orders where the total due is greater than the average of the total dues of all the orders*/
SELECT SalesOrderID, TotalDue
FROM Sales.SalesOrderHeader 
WHERE TotalDue > 
      (
	  SELECT AVG(TotalDue)
      FROM Sales.SalesOrderHeader
	  )
ORDER BY TotalDue, SalesOrderID;
